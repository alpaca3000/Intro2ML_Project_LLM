import streamlit as st
import pandas as pd
import time
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
from services.vocab import get_user_vocabulary, delete_vocab, update_vocab_status
from services.translate import translate_text
from utils.session import is_logged_in

# initialize session state for editing and deleting word
if "editing_id" not in st.session_state:
    st.session_state.editing_id = None
if "deleting_id" not in st.session_state:
    st.session_state.deleting_id = None


# page title
st.title("TRANG T·ª™ V·ª∞NG C·ª¶A T√îI")

# check if user is logged in
if "is_logged_in" not in st.session_state or not st.session_state.is_logged_in:
    st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
    st.stop()

st.sidebar.title(f"Xin ch√†o {st.session_state.username}!")

## ------------------- USER VOCABULARY TABLE ------------------
st.subheader("Danh s√°ch t·ª´ v·ª±ng c·ªßa t√¥i")

data = get_user_vocabulary(st.session_state["user_id"])
columns = ["vocab_id", "user_id", "en", "vi", "class", "examples", "synonyms", "status", "date_added"]
vocabulary_df = pd.DataFrame(data, columns=columns)

# X√¢y d·ª±ng c·∫•u h√¨nh b·∫£ng
gb_vocabulary = GridOptionsBuilder.from_dataframe(vocabulary_df)
gb_vocabulary.configure_selection(selection_mode="single", use_checkbox=True)
gb_vocabulary.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
gb_vocabulary.configure_default_column(editable=False, resizable=True)
gb_vocabulary.configure_column("user_id", hide=True)  # ·∫®n c·ªôt user_id
gb_vocabulary.configure_column("synonyms", hide=True)  # ·∫®n c·ªôt synonyms
# gb_vocabulary.configure_column("date_added", hide=True)  # ·∫®n c·ªôt vocab_id
gb_vocabulary.configure_column("examples", hide=True)  # ·∫®n c·ªôt examples
gb_vocabulary.configure_grid_options(rowHeight=32)
vocabulary_table = AgGrid(
    vocabulary_df,
    gridOptions=gb_vocabulary.build(),
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    fit_columns_on_grid_load=True,
    height=min(300, (len(vocabulary_df) + 2) * 32 + 32)
)

# get selected word
selected_row = vocabulary_table["selected_rows"]

# when 1 row is selected, show edit and delete buttons
if selected_row is not None:
    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt t·ª´
    st.markdown(f"### T·ª´ v·ª±ng: **{selected_row['en'].values[0]}**")
    st.markdown(f"- **ƒê·ªãnh nghƒ©a:** {selected_row['vi'].values[0]}")
    st.markdown(f"- **Lo·∫°i t·ª´:** {selected_row['class'].values[0]}")
    examples = selected_row["examples"].values[0]
    if examples:
        st.markdown(f"- **V√≠ d·ª•:**")
        blank_col, example_col = st.columns([1, 9])
        with example_col:
            for idx, example in enumerate(examples):
                with st.expander(f"- **{example}**"):
                    st.write(f"T·∫°m d·ªãch: {translate_text(example)}")
        # for example in examples:
        #     st.markdown(f"  - **{example}**")

    else: 
        st.markdown("- **V√≠ d·ª•:** Kh√¥ng c√≥ v√≠ d·ª• n√†o ƒë∆∞·ª£c cung c·∫•p.")
    st.markdown(f"- **T·ª´ ƒë·ªìng nghƒ©a:** {selected_row['synonyms'].values[0]}")

left_blank_col, col1, col2, right_blank_col = st.columns([1, 2, 2, 1])
with col1:
    if st.button("C·∫≠p nh·∫≠t tr·∫°ng th√°i", use_container_width=True, icon="‚úèÔ∏è", disabled=(selected_row is None)):
        st.session_state.editing_id = selected_row["vocab_id"].values[0]
with col2:
    if st.button("X√≥a", use_container_width=True, icon="üóëÔ∏è", disabled=(selected_row is None)):
        st.session_state.deleting_id = selected_row["vocab_id"].values[0]

# N·∫øu ƒëang ch·ªânh s·ª≠a
if st.session_state.editing_id is not None:
    # L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i
    current_status = selected_row["status"].values[0]
    new_status = "ƒê√£ nh·ªõ" if current_status == "ƒêang h·ªçc" else "ƒêang h·ªçc"

    st.warning(f"‚ö†Ô∏è X√°c nh·∫≠n ƒë·ªïi t·ª´ **{current_status}** ‚Üí **{new_status}** ? ")

    left_blank_col, col_confirm, col_cancel, right_blank_col = st.columns([1, 1, 1, 1])
    with col_confirm:
        if st.button("‚úîÔ∏è X√°c nh·∫≠n", use_container_width=True):
            result, message = update_vocab_status(st.session_state.editing_id, new_status)
            if result:
                st.toast(f"‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ v·ª±ng th√†nh c√¥ng!")
            else:
                st.error(f"‚ùå L·ªói: {message}")
            st.session_state.editing_id = None
            time.sleep(1)
            st.rerun()

    with col_cancel:
        if st.button("‚ùå H·ªßy", use_container_width=True):
            st.session_state.editing_id = None
            st.rerun()

# N·∫øu ƒëang x√≥a
if st.session_state.deleting_id is not None:
    st.warning("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·ª´ n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.")

    left_blank_col1, col_confirm, col_cancel, right_blank_col1 = st.columns([1, 1, 1, 1])
    with col_confirm:
        if st.button("X√°c nh·∫≠n x√≥a", use_container_width=True, icon="‚úÖ"):
            result, message = delete_vocab(selected_row["vocab_id"].values[0])
            if result:
                st.toast("ƒê√£ x√≥a t·ª´ v·ª±ng th√†nh c√¥ng!", icon="üóëÔ∏è")
            else:
                st.error(f"‚ùå L·ªói: {message}")
            st.session_state.deleting_id = None
            time.sleep(1)
            st.rerun()

    with col_cancel:
        if st.button("H·ªßy", use_container_width=True, icon="‚ùå"):
            st.session_state.deleting_id = None
            st.rerun()